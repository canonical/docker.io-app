.nh
.TH "DOCKER" "1" "Jun 2025" "Docker Community" "Docker User Manuals"

.SH NAME
docker-container-exec - Execute a command in a running container


.SH SYNOPSIS
\fBdocker container exec [OPTIONS] CONTAINER COMMAND [ARG...]\fP


.SH DESCRIPTION
Run a process in a running container.

.PP
The command started using \fBdocker exec\fR will only run while the container's primary
process (\fBPID 1\fR) is running, and will not be restarted if the container is restarted.

.PP
If the container is paused, then the \fBdocker exec\fR command will wait until the
container is unpaused, and then run


.SH CAPABILITIES
\fBprivileged\fR gives the process extended
Linux capabilities
\[la]https://man7.org/linux/man\-pages/man7/capabilities.7.html\[ra]
when running in a container.

.PP
Without this flag, the process run by \fBdocker exec\fR in a running container has
the same capabilities as the container, which may be limited. Set
\fB--privileged\fR to give all capabilities to the process.


.SH USER
\fBuser\fR sets the username or UID used and optionally the groupname or GID for the specified command.

.PP
The followings examples are all valid:
   --user [user | user:group | uid | uid:gid | user:gid | uid:group ]

.PP
Without this argument the command will be run as root in the container.


.SH Exit Status
The exit code from \fBdocker exec\fR gives information about why the container
failed to exec or why it exited.  When \fBdocker exec\fR exits with a non-zero code,
the exit codes follow the \fBchroot\fR standard, see below:

.PP
\fB\fI126\fP\fP if the \fB\fIcontained command\fP\fP cannot be invoked

.EX
$ docker exec busybox /etc; echo $?
# exec: "/etc": permission denied
  docker: Error response from daemon: Contained command could not be invoked
  126
.EE

.PP
\fB\fI127\fP\fP if the \fB\fIcontained command\fP\fP cannot be found

.EX
$ docker exec busybox foo; echo $?
# exec: "foo": executable file not found in $PATH
  docker: Error response from daemon: Contained command not found or does not exist
  127
.EE

.PP
\fB\fIExit code\fP\fP of \fB\fIcontained command\fP\fP otherwise

.EX
$ docker exec busybox /bin/sh -c 'exit 3' 
# 3
.EE


.SH OPTIONS
\fB-d\fP, \fB--detach\fP[=false]
	Detached mode: run command in the background

.PP
\fB--detach-keys\fP=""
	Override the key sequence for detaching a container

.PP
\fB-e\fP, \fB--env\fP=
	Set environment variables

.PP
\fB--env-file\fP=
	Read in a file of environment variables

.PP
\fB-i\fP, \fB--interactive\fP[=false]
	Keep STDIN open even if not attached

.PP
\fB--privileged\fP[=false]
	Give extended privileges to the command

.PP
\fB-t\fP, \fB--tty\fP[=false]
	Allocate a pseudo-TTY

.PP
\fB-u\fP, \fB--user\fP=""
	Username or UID (format: "[:]")

.PP
\fB-w\fP, \fB--workdir\fP=""
	Working directory inside the container


.SH SEE ALSO
\fBdocker-container(1)\fP
